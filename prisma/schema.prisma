// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           Int         @id @default(autoincrement())
  name         String?
  uid          String     @unique()
  wa_token       String?     @db.LongText
  waba_id       String?     @unique()
  wa_phone_id       String?     @unique()
  ig_user_id       String?     @unique()
  ig_token       String?     @db.LongText
  template_exist       Boolean     @default(false)
  users          User[]
  roles          Role[]
  conversations  Conversation[]
  bot  Bot?

  @@map("organizations")
}

model User {
  id                Int            @id @default(autoincrement())
  name              String?
  email             String         @unique()
  password          String?
  role              Role?          @relation(fields: [role_id], references: [id])
  role_id           Int?           
  is_deleted        Boolean         @default(false)
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  conversations     Conversation[]

  @@map("users")
}

model Role {
  id                Int            @id @default(autoincrement())
  title             String?
  users              User[]
  permissions       String?        @db.LongText
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("roles")
}

model Conversation {
  id          String   @id @default(cuid())
  name         String?
  email         String?
  phone         String?
  username         String?
  meta_id         String?
  channel         String?
  body         String?     @db.LongText
  is_lead      Boolean     @default(false)
  is_end      Boolean     @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organizations         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int
  created_at                           DateTime                      @default(now())
  updated_at                           DateTime                      @updatedAt

  @@map("conversations")
}


model Bot {
  id                String   @id @default(cuid())
  name              String
  system_bio        String   @db.LongText
  model             String?
  tools             Tool[]
  output_type       String?  @default("text")
  output_parameters String?  @db.LongText
  organization         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int     @unique
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("bots")
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String
  parameters  String?  @db.LongText
  api         String?  @db.LongText
  bot         Bot?     @relation(fields: [bot_id], references: [id])
  bot_id      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("tools")
}

model Hook {
  id          String   @id @default(cuid())
  type        String
  data  String?  @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("hooks")
}

