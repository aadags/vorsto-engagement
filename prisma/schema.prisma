// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           Int         @id @default(autoincrement())
  name         String?
  tagline         String?
  uid          String     @unique()
  wa_token       String?     @db.LongText
  waba_id       String?     @unique()
  wa_phone_id       String?     @unique()
  ig_user_id       String?     @unique()
  ig_token       String?     @db.LongText
  template_exist       Boolean     @default(false)
  onboarding       Boolean     @default(false)
  users          User[]
  roles          Role[]
  conversations  Conversation[]
  call_queues  CallQueue[]
  calls  Call[]
  live_call_agents  LiveCallAgent[]
  tickets  Ticket[]
  comments  Comment[]
  forms  Form[]
  contacts  Contact[]
  numbers  Number[]
  agents  Agent[]
  payment_processors  PaymentProcessor[]
  orders  Order[]
  products  Product[]
  categories  Category[]
  carts  Cart[]
  stripe_id    String?     @unique()
  stripe_account_id    String?     @unique()
  plan         String      @default("free")
  plan_id  String?
  number_plan_id  String?
  support_email  String?    @unique()
  support_email_connection  String?    @db.LongText
  call_center_number    String?    @unique()
  allow_speech        Boolean         @default(false)
  country  String?
  currency  String?
  ship_org_id  String?
  logo  String?
  logo_id  String?
  timezone  String?
  hours  Json?
  contact_number  String?
  contact_email  String?
  subdomain  String?    @unique()
  channel_fee  Int    @default(2)
  shop_template  String?    @default("simple")
  quarterly_revenue_target             Int?    @default(2500000)
  ai_human_take_over   Boolean   @default(true)
  ai_system_bio        String?  
  ai_auto_engage       Boolean   @default(true)
  ai_auto_feedBack     Boolean   @default(true)
  ai_auto_marketing    Boolean   @default(true)
  created_at                           DateTime?                      @default(now())
  updated_at                           DateTime?                      @updatedAt

  @@map("organizations")
}

model User {
  id                Int            @id @default(autoincrement())
  name              String?
  email             String         @unique()
  password          String?
  role              Role?          @relation(fields: [role_id], references: [id])
  role_id           Int?           
  is_validated        Boolean         @default(false)
  is_deleted        Boolean         @default(false)
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  conversations     Conversation[]
  call_queue     CallQueue?
  calls     Call[]
  tickets  Ticket[]
  comments  Comment[]

  @@map("users")
}

model Role {
  id                Int            @id @default(autoincrement())
  title             String?
  users              User[]
  permissions       String?        @db.LongText
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("roles")
}

model Conversation {
  id          String   @id @default(cuid())
  name         String?
  email         String?
  subject         String?
  phone         String?
  username         String?
  meta_id         String?
  channel         String?
  body         String?     @db.LongText
  is_lead      Boolean     @default(false)
  is_end      Boolean     @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organizations         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  tickets  Ticket[]
  created_at                           DateTime                      @default(now())
  updated_at                           DateTime                      @updatedAt

  @@map("conversations")
}


model Agent {
  id                String   @id @default(cuid())
  name              String
  human_takeover    Boolean  @default(true)
  category          String?  @default("Custom")
  system_bio        String   @db.LongText
  model             String?
  tools             Tool[]
  output_type       String?  @default("text")
  output_parameters String?  @db.LongText
  organization         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int   
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("agents")
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String
  parameters  String?  @db.LongText
  api         String?  @db.LongText
  agent         Agent?     @relation(fields: [agent_id], references: [id])
  agent_id      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("tools")
}

model Hook {
  id          String   @id @default(cuid())
  type        String
  data  String?  @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("hooks")
}

model CallQueue {
  id           String @id @default(cuid())
  from String 
  conferenceId String @unique()
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?     @unique()
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("call_queues")
}

model Call {
  id           String @id @default(cuid())
  from String
  conferenceId String @unique()
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?     
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  status   String
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  created_at  DateTime @default(now())
  agent_joined_at  DateTime? 
  duration  Int? 
  recording  String?  @db.LongText
  transcription  String?   @db.LongText
  tickets  Ticket[]
  updated_at  DateTime @updatedAt

  @@map("calls")
}

model LiveCallAgent {
  id           String @id @default(cuid())
  user_id      Int   @unique()
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("live_call_agents")
}


model CallLog {
  id           String @id @default(cuid())
  transcript      String?  @db.LongText

  @@map("call_logs")
}

model Ticket {
  id           String @id @default(cuid())
  title      String
  category      String
  priority      String
  description      String?  @db.LongText
  comments  Comment[]
  conversation         Conversation?       @relation(fields: [conversation_id], references: [id])
  conversation_id      String?     @unique()
  call         Call?       @relation(fields: [call_id], references: [id])
  call_id      String?     @unique()
  is_closed    Boolean  @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("tickets")
}


model Comment {
  id           String @id @default(cuid())
  body      String   @db.LongText
  ticket         Ticket       @relation(fields: [ticket_id], references: [id])
  ticket_id      String
  user         User       @relation(fields: [user_id], references: [id])
  user_id      Int
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("comments")
}

model Contact {
  id          String   @id @default(cuid())
  name        String?
  email       String?
  phone       String?
  username    String?
  stripe_id    String?
  satisfaction_score Int?
  sentiment   String? @db.LongText
  organization Organization @relation(fields: [organization_id], references: [id])
  organization_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  conversations  Conversation[]
  calls  Call[]
  carts  Cart[]
  orders  Order[]

  @@map("contacts")

  // Composite unique constraints to enforce uniqueness per organization
  @@unique([organization_id, email])
  @@unique([organization_id, phone])
  @@unique([organization_id, username])
  @@unique([organization_id, stripe_id])
}

model Form {
  id           String @id @default(cuid())
  name      String   
  description      String   
  data   String? @db.LongText
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  for_responses  FormResponse[]

  @@map("forms")
}

model FormResponse {
  id           String @id @default(cuid())  
  data   String? @db.LongText
  form     Form   @relation(fields: [form_id], references: [id])
  form_id   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("form_response")
}

model Number {
  id           String @id @default(cuid())  
  number    String?    @unique()
  voice      Boolean    
  sms      Boolean    
  plan      String    
  locality      String?    
  sid      String?    
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("numbers")
}

model DeletedNumber {
  id           String @id @default(cuid())  
  number    String?    @unique()
  voice      Boolean    
  sms      Boolean     
  locality      String?    
  sid      String?    
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("deleted_numbers")
}

model PaymentProcessor {
  id      String @id @default(cuid())  
  name    String 
  accountId    String
  access_token      String?      
  refresh_token      String?      
  public_token      String?      
  ttl      String?      
  hook_secret      String?      
  location      String?      
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("payment_processors")

  @@unique([organization_id, name])
  @@unique([organization_id, accountId])
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  image         String?  
  tax           Int?
  tax_type           String?
  outofstock      Boolean? @default(false)   
  images  Image[]
  inventories     Inventory[]
  category         Category?      @relation(fields: [category_id], references: [id])
  category_id       String?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  active      Boolean?  @default(true)   
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("products")
}    

model Category {
  id            String   @id @default(cuid())
  name          String
  description   String?
  products     Product[]
  arrangement  Int?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  active      Boolean?  @default(true) 
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("categories")
}  

model Inventory {
  id              String      @id @default(cuid())
  product         Product      @relation(fields: [product_id], references: [id])
  product_id       String
  name            String      
  parent_id            String?      
  quantity        Int          
  price           Int          
  order_items  OrderItem[]
  cart_items  CartItem[]
  active      Boolean?  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("inventories")
}


model Image {
  id            String   @id @default(cuid())
  product         Product      @relation(fields: [product_id], references: [id])
  product_id       String
  cloud_id          String? @unique()
  url               String
  default         Boolean?    @default(false)  
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("images")
}

model Order {
  id              String      @id @default(cuid())
  total_price           Int          
  sub_total_price           Int?          
  shipping_commission           Int?          
  shipping_price           Int?          
  shipping_tip           Int?          
  tax_total           Int?          
  transactionId   String?       @unique  
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int    
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String? 
  channel      String? 
  address      String? 
  note      String? 
  order_items  OrderItem[]
  status        String        @default("Pending")
  shipping_id   String?       @unique  
  tracking_id   String?       @unique  
  driver_info   String?       @db.LongText
  driver_location   String?     @db.LongText
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("orders")
}

model OrderItem {
  id              String      @id @default(cuid()) 
  inventory         Inventory      @relation(fields: [inventory_id], references: [id])
  inventory_id       String
  status   String
  quantity        Int 
  price             Int? 
  tax             Int 
  order     Order   @relation(fields: [order_id], references: [id])
  order_id   String 
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("order_items")
}

model Cart {
  id         String      @id @default(cuid()) 
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int  
  uuid      String  @unique()
  cart_items  CartItem[]
  shipping_info     String?   @db.LongText
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id         String      @id @default(cuid()) 
  inventory         Inventory      @relation(fields: [inventory_id], references: [id])
  inventory_id       String
  quantity   Int
  cart         Cart       @relation(fields: [cart_id], references: [id])
  cart_id      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("cart_items")
}