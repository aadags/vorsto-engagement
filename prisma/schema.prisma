// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           Int         @id @default(autoincrement())
  name         String?
  number         String?
  dba         String?
  type         String?
  address         String?    @db.LongText
  address_lat         String?
  address_long         String?
  tagline         String?
  uid          String     @unique()
  wa_token       String?     @db.LongText
  waba_id       String?     @unique()
  wa_phone_id       String?     @unique()
  ig_user_id       String?     @unique()
  ig_token       String?     @db.LongText
  template_exist       Boolean     @default(false)
  onboarding       Boolean     @default(false)
  users          User[]
  roles          Role[]
  conversations  Conversation[]
  call_queues  CallQueue[]
  calls  Call[]
  live_call_agents  LiveCallAgent[]
  tickets  Ticket[]
  comments  Comment[]
  forms  Form[]
  contacts  Contact[]
  numbers  Number[]
  agents  Agent[]
  payment_processors  PaymentProcessor[]
  orders  Order[]
  products  Product[]
  categories  Category[]
  carts  Cart[]
  stripe_id    String?     @unique()
  stripe_account_id    String?     @unique()
  plan         String      @default("free")
  plan_id  String?
  number_plan_id  String?
  support_email  String?    @unique()
  support_email_connection  String?    @db.LongText
  call_center_number    String?    @unique()
  allow_speech        Boolean         @default(false)
  country  String?
  currency  String?
  ship_org_id  String?
  ship_org_info  Json?
  min_order  Int?
  logo  String?
  promo_image  String?
  logo_id  String?
  timezone  String?
  hours  Json?
  contact_number  String?
  contact_email  String?
  google_verification_code   String?
  subdomain  String?    @unique()
  channel_fee  Int    @default(2)
  shop_template  String?    @default("simple-res")
  quarterly_revenue_target             Int?    @default(2500000)
  ai_human_take_over   Boolean   @default(false)
  ai_system_bio        String?   @db.LongText
  ai_auto_engage       Boolean   @default(false)
  ai_auto_feedBack     Boolean   @default(false)
  ai_auto_marketing    Boolean   @default(false)
  parent_id        Int?
  parent       Organization? @relation("OrgParent", fields: [parent_id], references: [id])
  children     Organization[] @relation("OrgParent")
  loyalty_programs LoyaltyProgram[]
  membership_plans MembershipPlan[]
  devices Device[]
  terminals Terminal[]
  deals Deal[]
  reviews      Review[]
  ingredients      Ingredient[]
  tags  Json?   @db.Json
  zuppr_active   Boolean   @default(false)
  created_at                           DateTime?                      @default(now())
  updated_at                           DateTime?                      @updatedAt

  @@map("organizations")
}

model User {
  id                Int            @id @default(autoincrement())
  name              String?
  apple_id          String?        @unique()
  email             String         @unique()
  password          String?
  role              Role?          @relation(fields: [role_id], references: [id])
  role_id           Int?           
  is_validated        Boolean         @default(false)
  is_deleted        Boolean         @default(false)
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  conversations     Conversation[]
  call_queue     CallQueue?
  calls     Call[]
  tickets  Ticket[]
  comments  Comment[]

  @@map("users")
}

model Role {
  id                Int            @id @default(autoincrement())
  title             String?
  users              User[]
  permissions       String?        @db.LongText
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("roles")
}

model Conversation {
  id          String   @id @default(cuid())
  name         String?
  email         String?
  subject         String?
  phone         String?
  username         String?
  meta_id         String?
  channel         String?
  body         String?     @db.LongText
  is_lead      Boolean     @default(false)
  is_end      Boolean     @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organizations         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  tickets  Ticket[]
  created_at                           DateTime                      @default(now())
  updated_at                           DateTime                      @updatedAt

  @@map("conversations")
}


model Agent {
  id                String   @id @default(cuid())
  name              String
  human_takeover    Boolean  @default(true)
  category          String?  @default("Custom")
  system_bio        String   @db.LongText
  model             String?
  tools             Tool[]
  output_type       String?  @default("text")
  output_parameters String?  @db.LongText
  organization         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int   
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("agents")
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String
  parameters  String?  @db.LongText
  api         String?  @db.LongText
  agent         Agent?     @relation(fields: [agent_id], references: [id])
  agent_id      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("tools")
}

model Hook {
  id          String   @id @default(cuid())
  type        String
  data  String?  @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("hooks")
}

model CallQueue {
  id           String @id @default(cuid())
  from String 
  conferenceId String @unique()
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?     @unique()
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("call_queues")
}

model Call {
  id           String @id @default(cuid())
  from String
  conferenceId String @unique()
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?     
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  status   String
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  created_at  DateTime @default(now())
  agent_joined_at  DateTime? 
  duration  Int? 
  recording  String?  @db.LongText
  transcription  String?   @db.LongText
  tickets  Ticket[]
  updated_at  DateTime @updatedAt

  @@map("calls")
}

model LiveCallAgent {
  id           String @id @default(cuid())
  user_id      Int   @unique()
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("live_call_agents")
}


model CallLog {
  id           String @id @default(cuid())
  transcript      String?  @db.LongText

  @@map("call_logs")
}

model Ticket {
  id           String @id @default(cuid())
  title      String
  category      String
  priority      String
  description      String?  @db.LongText
  comments  Comment[]
  conversation         Conversation?       @relation(fields: [conversation_id], references: [id])
  conversation_id      String?     @unique()
  call         Call?       @relation(fields: [call_id], references: [id])
  call_id      String?     @unique()
  is_closed    Boolean  @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("tickets")
}


model Comment {
  id           String @id @default(cuid())
  body      String   @db.LongText
  ticket         Ticket       @relation(fields: [ticket_id], references: [id])
  ticket_id      String
  user         User       @relation(fields: [user_id], references: [id])
  user_id      Int
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("comments")
}

model Contact {
  id          String   @id @default(cuid())
  name        String?
  email       String?
  phone       String?
  username    String?
  stripe_id    String?
  satisfaction_score Int?
  sentiment   String? @db.LongText
  organization Organization @relation(fields: [organization_id], references: [id])
  organization_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  conversations  Conversation[]
  calls  Call[]
  carts  Cart[]
  orders  Order[]
  loyalty_accounts LoyaltyAccount[]
  reviews      Review[]
  
  customer_id String?
  customer Customer? @relation(fields: [customer_id], references: [id])

  @@map("contacts")

  // Composite unique constraints to enforce uniqueness per organization
  @@unique([organization_id, email])
  @@unique([organization_id, phone])
  @@unique([organization_id, username])
  @@unique([organization_id, stripe_id])
}

model Customer {
  id          String   @id @default(cuid())
  name        String?  
  email       String?  @unique
  stripe_id       String?  @unique
  square_id       String?  @unique
  apple_id       String?  @unique
  google_id       String?  @unique
  phone       String?  @unique
  device_token       String?
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  contacts  Contact[]

  @@map("customers")
}

model AppleLog {
  id          String   @id @default(cuid())
  name        String?  
  apple_id       String?  @unique
  email       String?  @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("apple_log")
}

model Form {
  id           String @id @default(cuid())
  name      String   
  description      String   
  data   String? @db.LongText
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  for_responses  FormResponse[]

  @@map("forms")
}

model FormResponse {
  id           String @id @default(cuid())  
  data   String? @db.LongText
  form     Form   @relation(fields: [form_id], references: [id])
  form_id   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("form_response")
}

model Number {
  id           String @id @default(cuid())  
  number    String?    @unique()
  voice      Boolean    
  sms      Boolean    
  plan      String    
  locality      String?    
  sid      String?    
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("numbers")
}

model DeletedNumber {
  id           String @id @default(cuid())  
  number    String?    @unique()
  voice      Boolean    
  sms      Boolean     
  locality      String?    
  sid      String?    
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("deleted_numbers")
}

model PaymentProcessor {
  id      String @id @default(cuid())  
  name    String 
  accountId    String
  access_token      String?      
  refresh_token      String?      
  public_token      String?      
  ttl      String?      
  hook_secret      String?      
  location      String?      
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("payment_processors")

  @@unique([organization_id, name])
  @@unique([organization_id, accountId])
}

model Product {
  id            String   @id @default(cuid())
  name          String
  type           String @default("default")
  description   String?
  image         String?  
  sku         String?  
  tax           Int?
  tax_type           String?
  outofstock      Boolean? @default(false)  
  display      Boolean? @default(true)  
  images  Image[]
  inventories     Inventory[]
  category         Category?      @relation(fields: [category_id], references: [id])
  category_id       String?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  active      Boolean?  @default(true)   
  reviews      Review[]
  comboItems    ComboItem[]
  comboRules    ComboRule[]
  dealProducts      DealProduct[]
  combo_price           Int?
  tags  Json?   @db.Json
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("products")
} 

model Category {
  id            String   @id @default(cuid())
  name          String
  description   String?
  products     Product[]
  arrangement  Int?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  active      Boolean?  @default(true) 
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("categories")
}  

model Inventory {
  id              String   @id @default(cuid())
  product         Product  @relation(fields: [product_id], references: [id])
  product_id      String
  name            String      
  parent_id       String?      
  barcode         String?      @unique()
  quantity        Int           // for unit-based items
  weight_available Float?       // for weight-based items (e.g., 50.5 kg)
  price           Int           // price per unit or per kg (in cents)
  price_unit      String?       @default("unit") // "per_item", "per_kg", "per_lb", etc.
  min_weight      Float?        // e.g., 1.0 (minimum 1kg to order)
  weight_step     Float?        // e.g., 0.25 (must order in steps like 1.25kg, 1.5kg)
  order_items     OrderItem[]
  cart_items      CartItem[]
  comboItems      ComboItem[]
  dealInventories      DealInventory[]
  active          Boolean?  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  ingredientUsages IngredientUsage[]

  @@map("inventories")
}

model Ingredient {
  id              String   @id @default(cuid())
  name            String
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int
  unit_type       String   // "unit", "kg", "lb", etc.
  quantity        Int?     // For unit-based tracking
  weight_available Float?  // For weight-based tracking (in kg or lb)

  price  Float?     // Stored in cents

  ingredientPurchases IngredientPurchase[]
  ingredientUsages IngredientUsage[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("ingredients")
}

model IngredientPurchase {
  id              String   @id @default(cuid())
  ingredient      Ingredient @relation(fields: [ingredient_id], references: [id])
  ingredient_id   String
  quantity        Int?       // for unit type
  weight          Float?     // for weight type
  cost            Float        // total cost in cents
  supplier        String?
  purchase_date   DateTime

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("ingredients_purchase")
}

model IngredientUsage {
  id              String   @id @default(cuid())
  ingredient      Ingredient @relation(fields: [ingredient_id], references: [id])
  ingredient_id   String

  inventory       Inventory @relation(fields: [inventory_id], references: [id])
  inventory_id    String

  usage_quantity  Int?       // If unit-based ingredient
  usage_weight    Float?     // If weight-based ingredient

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("ingredients_usage")
}

model ComboItem {
  id           String     @id @default(cuid())
  product      Product    @relation(fields: [product_id], references: [id])
  product_id   String
  inventory    Inventory  @relation(fields: [inventory_id], references: [id])
  inventory_id String
  extra_price  Int?       // additional price in cents for this inventory item
  option_index  Int        @default(0)
  @@map("combo_items")
}

model ComboRule {
  id           String   @id @default(cuid())
  product      Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id   String
  option_index Int
  label        String?
  required     Boolean  @default(false)  
  min          Int?                     
  max          Int?                    

  @@unique([product_id, option_index]) 
  @@map("combo_rules")
}


model Image {
  id            String   @id @default(cuid())
  product         Product      @relation(fields: [product_id], references: [id])
  product_id       String
  cloud_id          String? @unique()
  url               String
  default         Boolean?    @default(false)  
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("images")
}

model Order {
  id              String      @id @default(cuid())
  total_price           Int          
  sub_total_price           Int?          
  shipping_commission           Int?          
  deal_commission           Int?          
  service_fee           Int?          
  shipping_price           Int?          
  shipping_tip           Int?          
  tax_total           Int?          
  transactionId   String?       @unique  
  transactionAmount   Int?         
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int    
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String? 
  channel      String? 
  address      String? 
  note      String? 
  pickup    Boolean     @default(false)
  order_items  OrderItem[]
  loyalty_transactions LoyaltyTransaction[]
  status        String        @default("Pending")
  shipping_id   String?       @unique  
  tracking_id   String?       @unique  
  driver_info   String?       @db.LongText
  driver_location   Json?     
  reviewed       Boolean    @default(false)
  reviews      Review[]
  promo_usages        PromoUsage[]
  chat_log     Json?    @default("[]")
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("orders")
}

model OrderItem {
  id              String      @id @default(cuid()) 
  inventory         Inventory      @relation(fields: [inventory_id], references: [id])
  inventory_id       String
  status   String
  quantity        Float 
  price_unit          String? @default("unit")
  price             Int? 
  tax             Int 
  order     Order   @relation(fields: [order_id], references: [id])
  order_id   String 
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("order_items")
}

model Cart {
  id         String      @id @default(cuid()) 
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int  
  uuid      String  @unique()
  cart_items  CartItem[]
  shipping_info     String?   @db.LongText
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id         String      @id @default(cuid()) 
  inventory         Inventory      @relation(fields: [inventory_id], references: [id])
  inventory_id       String
  quantity   Float
  cart         Cart       @relation(fields: [cart_id], references: [id])
  cart_id      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("cart_items")
}

model LoyaltyProgram {
  id               String         @id @default(cuid())
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id  Int
  name             String
  point_rate       Float            // e.g., 1 point per $1
  redeem_rate      Float            // e.g., 100 points = $1
  is_active        Boolean        @default(true)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  loyalty_accounts LoyaltyAccount[]

  @@unique([organization_id, name])
  @@map("loyalty_programs")
}

model MembershipPlan {
  id               String         @id @default(cuid())
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id  Int
  name             String
  price            Int            // in cents
  duration_days    Int            // how long membership lasts
  benefits         String?        @db.LongText
  discount_percent Float?   @default(0) // e.g. 10 = 10% discount
  cashback_percent Float?   @default(0) // e.g. 5 = 5% back in points
  is_active        Boolean        @default(true)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  loyalty_accounts LoyaltyAccount[]

  @@unique([organization_id, name])
  @@map("membership_plans")
}

model LoyaltyAccount {
  id                  String           @id @default(cuid())
  contact             Contact          @relation(fields: [contact_id], references: [id])
  contact_id          String
  loyalty_program     LoyaltyProgram?  @relation(fields: [loyalty_program_id], references: [id])
  loyalty_program_id  String?
  membership_plan     MembershipPlan?  @relation(fields: [membership_plan_id], references: [id])
  membership_plan_id  String?
  card_code   String?
  points              Int              @default(0)
  membership_expires  DateTime?
  transactions LoyaltyTransaction[]
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt

  @@unique([contact_id, loyalty_program_id])
  @@unique([contact_id, membership_plan_id])
  @@map("loyalty_accounts")
}

model LoyaltyTransaction {
  id                String          @id @default(cuid())
  loyalty_account   LoyaltyAccount  @relation(fields: [loyalty_account_id], references: [id])
  loyalty_account_id String
  type              String          // "earn", "redeem", "adjust"
  amount            Int             // positive or negative, based on type
  description       String?         // e.g., "Earned from Order #123"
  order             Order?          @relation(fields: [order_id], references: [id])
  order_id          String?
  created_at        DateTime        @default(now())

  @@map("loyalty_transactions")
}

model Review {
  id          String   @id @default(cuid())
  product         Product?      @relation(fields: [product_id], references: [id])
  product_id      String?       // now optional
  order       Order    @relation(fields: [order_id], references: [id])
  order_id    String   @unique
  contact     Contact? @relation(fields: [contact_id], references: [id])
  contact_id  String?
  organization     Organization? @relation(fields: [organization_id], references: [id])
  organization_id  Int?
  rating      Int
  message     String   @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("reviews")
}

model Device {
  id              Int         @id @default(autoincrement())
  name            String?
  type            String?
  token           String      @unique
  uid           String?      @unique
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int

  terminals       Terminal[]

  @@map("devices")
}

model Terminal {
  id              Int         @id @default(autoincrement())
  type            String?
  token           String      @unique
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int

  device          Device?      @relation(fields: [device_id], references: [id])
  device_id       Int?

  @@map("terminals")
}

model Deal {
  id              String   @id @default(cuid())
  title           String
  description     String?
  imageUrl        String?
  type            DealType   // ONE_OFF or RECURRING

  // Timing
  startDate       DateTime?
  endDate         DateTime?
  recurrenceRule  Json?       // { frequency: "WEEKLY", days: ["FRI"], timeStart: "17:00", timeEnd: "19:00" }

  // Default Discount / Pricing
  discountType    DiscountType?  // PERCENTAGE, FIXED, or FLAT_PRICE
  discountValue   Float?         // 20% off OR $5 off OR flat price value

  isActive        Boolean   @default(true)

  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id Int

  inventories     DealInventory[]   // link to inventory items
  products        DealProduct[]

  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  @@map("deals")
}

model DealInventory {
  id              String   @id @default(cuid())

  dealId          String
  deal            Deal     @relation(fields: [dealId], references: [id])

  inventoryId     String
  inventory       Inventory @relation(fields: [inventoryId], references: [id])

  // Per-inventory overrides
  customPrice     Float?        // flat price override for this SKU
  discountType    DiscountType? // can override deal-level rule
  discountValue   Float?        // override amount

  @@map("deal_inventories")
}

model DealProduct {
  id            String   @id @default(cuid())
  dealId        String
  deal          Deal     @relation(fields: [dealId], references: [id])

  productId     String
  product       Product  @relation(fields: [productId], references: [id])

  customPrice   Float?
  discountType  DiscountType?
  discountValue Float?

  @@map("deal_products")
}

enum DealType {
  ONE_OFF
  RECURRING
}

enum DiscountType {
  PERCENTAGE   // 20% off
  FIXED        // $5 off
  FLAT_PRICE   // Set SKU price to a fixed number
}

model Promo {
  id            String      @id @default(cuid())
  code          String?     @unique
  description   String
  type          String      // e.g. "percent", "flat", "free_delivery"
  value         Int         // percent (20) or flat discount in cents
  min_order_cents Int?      // minimum subtotal to apply
  max_uses_per_user Int?    // e.g. 3 for "first 3 orders"
  orgs_json     Json?       // JSON list of orgs eligible
  active        Boolean     @default(true)
  starts_at     DateTime?   
  ends_at       DateTime?   

  usages        PromoUsage[]

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("promos")
}

model PromoUsage {
  id            String   @id @default(cuid())
  promo_id      String
  promo         Promo    @relation(fields: [promo_id], references: [id])

  customer_id   String
  order_id      String?  // linked after order creation
  order         Order?   @relation(fields: [order_id], references: [id])

  discount_applied Int   @default(0)

  created_at    DateTime @default(now())

  @@index([customer_id])
  @@unique([promo_id, order_id])
}

model ActivateZuppr {
  id            String   @id @default(cuid())
  org_id      Int
  created_at    DateTime @default(now())
}



