// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           Int         @id @default(autoincrement())
  name         String?
  uid          String     @unique()
  wa_token       String?     @db.LongText
  waba_id       String?     @unique()
  wa_phone_id       String?     @unique()
  ig_user_id       String?     @unique()
  ig_token       String?     @db.LongText
  template_exist       Boolean     @default(false)
  users          User[]
  roles          Role[]
  conversations  Conversation[]
  call_queues  CallQueue[]
  calls  Call[]
  live_call_agents  LiveCallAgent[]
  tickets  Ticket[]
  comments  Comment[]
  contacts  Contact[]
  bot  Bot?
  stripe_id    String?     @unique()
  plan         String      @default("free")
  plan_id  String?
  support_email  String?    @unique()
  support_email_connection  String?    @db.LongText
  call_center_number    String?    @unique()
  allow_speech        Boolean         @default(false)
  created_at                           DateTime?                      @default(now())
  updated_at                           DateTime?                      @updatedAt

  @@map("organizations")
}

model User {
  id                Int            @id @default(autoincrement())
  name              String?
  email             String         @unique()
  password          String?
  role              Role?          @relation(fields: [role_id], references: [id])
  role_id           Int?           
  is_deleted        Boolean         @default(false)
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  conversations     Conversation[]
  call_queue     CallQueue?
  calls     Call[]
  tickets  Ticket[]
  comments  Comment[]

  @@map("users")
}

model Role {
  id                Int            @id @default(autoincrement())
  title             String?
  users              User[]
  permissions       String?        @db.LongText
  organizations     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("roles")
}

model Conversation {
  id          String   @id @default(cuid())
  name         String?
  email         String?
  subject         String?
  phone         String?
  username         String?
  meta_id         String?
  channel         String?
  body         String?     @db.LongText
  is_lead      Boolean     @default(false)
  is_end      Boolean     @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organizations         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  tickets  Ticket[]
  created_at                           DateTime                      @default(now())
  updated_at                           DateTime                      @updatedAt

  @@map("conversations")
}


model Bot {
  id                String   @id @default(cuid())
  name              String
  human_takeover    Boolean  @default(true)
  system_bio        String   @db.LongText
  model             String?
  tools             Tool[]
  output_type       String?  @default("text")
  output_parameters String?  @db.LongText
  organization         Organization       @relation(fields: [organization_id], references: [id])
  organization_id      Int     @unique()
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("bots")
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String
  parameters  String?  @db.LongText
  api         String?  @db.LongText
  bot         Bot?     @relation(fields: [bot_id], references: [id])
  bot_id      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("tools")
}

model Hook {
  id          String   @id @default(cuid())
  type        String
  data  String?  @db.LongText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("hooks")
}

model CallQueue {
  id           String @id @default(cuid())
  from String 
  conferenceId String @unique()
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?     @unique()
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("call_queues")
}

model Call {
  id           String @id @default(cuid())
  from String
  conferenceId String @unique()
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?     
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  status   String
  contact         Contact?       @relation(fields: [contact_id], references: [id])
  contact_id      String?
  created_at  DateTime @default(now())
  agent_joined_at  DateTime? 
  duration  Int? 
  recording  String?  @db.LongText
  transcription  String?   @db.LongText
  tickets  Ticket[]
  updated_at  DateTime @updatedAt

  @@map("calls")
}

model LiveCallAgent {
  id           String @id @default(cuid())
  user_id      Int   @unique()
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int

  @@map("live_call_agents")
}


model CallLog {
  id           String @id @default(cuid())
  transcript      String?  @db.LongText

  @@map("call_logs")
}

model Ticket {
  id           String @id @default(cuid())
  title      String
  category      String
  priority      String
  description      String?  @db.LongText
  comments  Comment[]
  conversation         Conversation?       @relation(fields: [conversation_id], references: [id])
  conversation_id      String?     @unique()
  call         Call?       @relation(fields: [call_id], references: [id])
  call_id      String?     @unique()
  is_closed    Boolean  @default(false)
  user         User?       @relation(fields: [user_id], references: [id])
  user_id      Int?
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("tickets")
}


model Comment {
  id           String @id @default(cuid())
  body      String   @db.LongText
  ticket         Ticket       @relation(fields: [ticket_id], references: [id])
  ticket_id      String
  user         User       @relation(fields: [user_id], references: [id])
  user_id      Int
  organization     Organization   @relation(fields: [organization_id], references: [id])
  organization_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("comments")
}

model Contact {
  id          String   @id @default(cuid())
  name        String?
  email       String?
  phone       String?
  username    String?
  satisfaction_score Int?
  sentiment   String? @db.LongText
  organization Organization @relation(fields: [organization_id], references: [id])
  organization_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  conversations  Conversation[]
  calls  Call[]

  @@map("contacts")

  // Composite unique constraints to enforce uniqueness per organization
  @@unique([organization_id, email])
  @@unique([organization_id, phone])
  @@unique([organization_id, username])
}

